input {
  tcp {
    port => 5000
    type => syslog
  }
  udp {
    port => 5000
    type => syslog
  }
}

filter {
  if [type] == "syslog" {
    grok {
      patterns_dir => "/etc/logstash/patterns.d"
      match => { "message" => "%{LOGSPOUT_MSG}+%{GREEDYDATA:msg}" }
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    if !("_grokparsefailure" in [tags]) {
      mutate {
        replace => [ "@source_host", "%{syslog_hostname}" ]
        replace => [ "@message", "%{syslog_message}" ]
      }
    }
    mutate {
      remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
    }

    if "nginx" in [containername] {
      grok {
        patterns_dir => "/etc/logstash/patterns.d"
        match => [ "msg" , "%{NGINX_ACCESS}+%{GREEDYDATA:extra_fields}"]
        overwrite => [ "msg" ]
        remove_tag => ["_grokparsefailure"]
	    add_tag => ["nginx-access"]
      }

      if "_grokparsefailure" in [tags] {
        grok {
          patterns_dir => "/etc/logstash/patterns.d"
          match => [ "msg" , "%{NGINX_ERROR}+%{GREEDYDATA:extra_fields}"]
          overwrite => [ "msg" ]
          remove_tag => ["_grokparsefailure"]
          add_tag => ["nginx-error"]
        }
      }

      if !("_grokparsefailure" in [tags]) {
        mutate {
          replace => [ "type", "nginx-log" ]
        }
      }

      geoip {
        source => "clientip"
        target => "geoip"
        add_tag => [ "nginx-geoip" ]
      }

      date {
        match => [ "timestamp",
                   "dd/MMM/YYYY:HH:mm:ss Z",
                   "YYYY/MM/dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }

      useragent {
        source => "agent"
      }
    }
  }
}

output {
  elasticsearch { hosts => "elasticsearch:9200" }
  stdout { codec => rubydebug }
}
